import {
  require_extends
} from "./chunk-QEYWXGGP.js";
import {
  require_interopRequireDefault
} from "./chunk-V434JVL2.js";
import {
  addHours_exports,
  addMinutes_exports,
  addMonths_exports,
  addSeconds_exports,
  addYears_exports,
  en_US_exports,
  endOfDay_exports,
  endOfMonth_exports,
  endOfWeek_exports,
  endOfYear_exports,
  format_exports,
  getDate_exports,
  getDaysInMonth_exports,
  getHours_exports,
  getMilliseconds_exports,
  getMinutes_exports,
  getMonth_exports,
  getSeconds_exports,
  getWeek_exports,
  getYear_exports,
  init_addHours,
  init_addMinutes,
  init_addMonths,
  init_addSeconds,
  init_addYears,
  init_en_US,
  init_endOfDay,
  init_endOfMonth,
  init_endOfWeek,
  init_endOfYear,
  init_format,
  init_getDate,
  init_getDaysInMonth,
  init_getHours,
  init_getMilliseconds,
  init_getMinutes,
  init_getMonth,
  init_getSeconds,
  init_getWeek,
  init_getYear,
  init_isAfter,
  init_isBefore,
  init_isEqual,
  init_isSameDay,
  init_isSameHour,
  init_isSameMonth,
  init_isSameYear,
  init_isValid,
  init_isWithinInterval,
  init_parse,
  init_setDate,
  init_setHours,
  init_setMilliseconds,
  init_setMinutes,
  init_setMonth,
  init_setSeconds,
  init_setYear,
  init_startOfDay,
  init_startOfMonth,
  init_startOfWeek,
  init_startOfYear,
  isAfter_exports,
  isBefore_exports,
  isEqual_exports,
  isSameDay_exports,
  isSameHour_exports,
  isSameMonth_exports,
  isSameYear_exports,
  isValid_exports,
  isWithinInterval_exports,
  parse_exports,
  setDate_exports,
  setHours_exports,
  setMilliseconds_exports,
  setMinutes_exports,
  setMonth_exports,
  setSeconds_exports,
  setYear_exports,
  startOfDay_exports,
  startOfMonth_exports,
  startOfWeek_exports,
  startOfYear_exports
} from "./chunk-VRFOK55N.js";
import {
  addDays_exports,
  addWeeks_exports,
  init_addDays,
  init_addWeeks
} from "./chunk-ZLL5TTH2.js";
import "./chunk-MOC2V2JG.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/@mui/x-date-pickers/AdapterDateFnsBase/AdapterDateFnsBase.js
var require_AdapterDateFnsBase = __commonJS({
  "node_modules/@mui/x-date-pickers/AdapterDateFnsBase/AdapterDateFnsBase.js"(exports) {
    "use strict";
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AdapterDateFnsBase = void 0;
    var _extends2 = _interopRequireDefault(require_extends());
    var formatTokenMap = {
      // Year
      y: {
        sectionType: "year",
        contentType: "digit",
        maxLength: 4
      },
      yy: "year",
      yyy: {
        sectionType: "year",
        contentType: "digit",
        maxLength: 4
      },
      yyyy: "year",
      // Month
      M: {
        sectionType: "month",
        contentType: "digit",
        maxLength: 2
      },
      MM: "month",
      MMMM: {
        sectionType: "month",
        contentType: "letter"
      },
      MMM: {
        sectionType: "month",
        contentType: "letter"
      },
      L: {
        sectionType: "month",
        contentType: "digit",
        maxLength: 2
      },
      LL: "month",
      LLL: {
        sectionType: "month",
        contentType: "letter"
      },
      LLLL: {
        sectionType: "month",
        contentType: "letter"
      },
      // Day of the month
      d: {
        sectionType: "day",
        contentType: "digit",
        maxLength: 2
      },
      dd: "day",
      do: {
        sectionType: "day",
        contentType: "digit-with-letter"
      },
      // Day of the week
      E: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      EE: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      EEE: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      EEEE: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      EEEEE: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      i: {
        sectionType: "weekDay",
        contentType: "digit",
        maxLength: 1
      },
      ii: "weekDay",
      iii: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      iiii: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      // eslint-disable-next-line id-denylist
      e: {
        sectionType: "weekDay",
        contentType: "digit",
        maxLength: 1
      },
      ee: "weekDay",
      eee: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      eeee: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      eeeee: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      eeeeee: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      c: {
        sectionType: "weekDay",
        contentType: "digit",
        maxLength: 1
      },
      cc: "weekDay",
      ccc: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      cccc: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      ccccc: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      cccccc: {
        sectionType: "weekDay",
        contentType: "letter"
      },
      // Meridiem
      a: "meridiem",
      aa: "meridiem",
      aaa: "meridiem",
      // Hours
      H: {
        sectionType: "hours",
        contentType: "digit",
        maxLength: 2
      },
      HH: "hours",
      h: {
        sectionType: "hours",
        contentType: "digit",
        maxLength: 2
      },
      hh: "hours",
      // Minutes
      m: {
        sectionType: "minutes",
        contentType: "digit",
        maxLength: 2
      },
      mm: "minutes",
      // Seconds
      s: {
        sectionType: "seconds",
        contentType: "digit",
        maxLength: 2
      },
      ss: "seconds"
    };
    var defaultFormats = {
      year: "yyyy",
      month: "LLLL",
      monthShort: "MMM",
      dayOfMonth: "d",
      dayOfMonthFull: "do",
      weekday: "EEEE",
      weekdayShort: "EEEEEE",
      hours24h: "HH",
      hours12h: "hh",
      meridiem: "aa",
      minutes: "mm",
      seconds: "ss",
      fullDate: "PP",
      keyboardDate: "P",
      shortDate: "MMM d",
      normalDate: "d MMMM",
      normalDateWithWeekday: "EEE, MMM d",
      fullTime12h: "hh:mm aa",
      fullTime24h: "HH:mm",
      keyboardDateTime12h: "P hh:mm aa",
      keyboardDateTime24h: "P HH:mm"
    };
    var AdapterDateFnsBase = class {
      constructor(props) {
        this.isMUIAdapter = true;
        this.isTimezoneCompatible = false;
        this.lib = void 0;
        this.locale = void 0;
        this.formats = void 0;
        this.formatTokenMap = formatTokenMap;
        this.escapedCharacters = {
          start: "'",
          end: "'"
        };
        this.longFormatters = void 0;
        this.date = (value) => {
          if (typeof value === "undefined") {
            return /* @__PURE__ */ new Date();
          }
          if (value === null) {
            return null;
          }
          return new Date(value);
        };
        this.getInvalidDate = () => /* @__PURE__ */ new Date("Invalid Date");
        this.getTimezone = () => {
          return "default";
        };
        this.setTimezone = (value) => {
          return value;
        };
        this.toJsDate = (value) => {
          return value;
        };
        this.getCurrentLocaleCode = () => {
          return this.locale.code;
        };
        this.is12HourCycleInCurrentLocale = () => {
          return /a/.test(this.locale.formatLong.time({
            width: "short"
          }));
        };
        this.expandFormat = (format) => {
          const longFormatRegexp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
          return format.match(longFormatRegexp).map((token) => {
            const firstCharacter = token[0];
            if (firstCharacter === "p" || firstCharacter === "P") {
              const longFormatter = this.longFormatters[firstCharacter];
              return longFormatter(token, this.locale.formatLong);
            }
            return token;
          }).join("");
        };
        this.formatNumber = (numberToFormat) => {
          return numberToFormat;
        };
        this.getDayOfWeek = (value) => {
          return value.getDay() + 1;
        };
        const {
          locale,
          formats,
          longFormatters,
          lib
        } = props;
        this.locale = locale;
        this.formats = (0, _extends2.default)({}, defaultFormats, formats);
        this.longFormatters = longFormatters;
        this.lib = lib || "date-fns";
      }
    };
    exports.AdapterDateFnsBase = AdapterDateFnsBase;
  }
});

// node_modules/@mui/x-date-pickers/AdapterDateFnsBase/index.js
var require_AdapterDateFnsBase2 = __commonJS({
  "node_modules/@mui/x-date-pickers/AdapterDateFnsBase/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "AdapterDateFnsBase", {
      enumerable: true,
      get: function() {
        return _AdapterDateFnsBase.AdapterDateFnsBase;
      }
    });
    var _AdapterDateFnsBase = require_AdapterDateFnsBase();
  }
});

// node_modules/@mui/x-date-pickers/AdapterDateFns/AdapterDateFns.js
var require_AdapterDateFns = __commonJS({
  "node_modules/@mui/x-date-pickers/AdapterDateFns/AdapterDateFns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.AdapterDateFns = void 0;
    var _addDays = (init_addDays(), __toCommonJS(addDays_exports));
    var _addSeconds = (init_addSeconds(), __toCommonJS(addSeconds_exports));
    var _addMinutes = (init_addMinutes(), __toCommonJS(addMinutes_exports));
    var _addHours = (init_addHours(), __toCommonJS(addHours_exports));
    var _addWeeks = (init_addWeeks(), __toCommonJS(addWeeks_exports));
    var _addMonths = (init_addMonths(), __toCommonJS(addMonths_exports));
    var _addYears = (init_addYears(), __toCommonJS(addYears_exports));
    var _endOfDay = (init_endOfDay(), __toCommonJS(endOfDay_exports));
    var _endOfWeek = (init_endOfWeek(), __toCommonJS(endOfWeek_exports));
    var _endOfYear = (init_endOfYear(), __toCommonJS(endOfYear_exports));
    var _format = (init_format(), __toCommonJS(format_exports));
    var _getDate = (init_getDate(), __toCommonJS(getDate_exports));
    var _getDaysInMonth = (init_getDaysInMonth(), __toCommonJS(getDaysInMonth_exports));
    var _getHours = (init_getHours(), __toCommonJS(getHours_exports));
    var _getMinutes = (init_getMinutes(), __toCommonJS(getMinutes_exports));
    var _getMonth = (init_getMonth(), __toCommonJS(getMonth_exports));
    var _getSeconds = (init_getSeconds(), __toCommonJS(getSeconds_exports));
    var _getMilliseconds = (init_getMilliseconds(), __toCommonJS(getMilliseconds_exports));
    var _getWeek = (init_getWeek(), __toCommonJS(getWeek_exports));
    var _getYear = (init_getYear(), __toCommonJS(getYear_exports));
    var _isAfter = (init_isAfter(), __toCommonJS(isAfter_exports));
    var _isBefore = (init_isBefore(), __toCommonJS(isBefore_exports));
    var _isEqual = (init_isEqual(), __toCommonJS(isEqual_exports));
    var _isSameDay = (init_isSameDay(), __toCommonJS(isSameDay_exports));
    var _isSameYear = (init_isSameYear(), __toCommonJS(isSameYear_exports));
    var _isSameMonth = (init_isSameMonth(), __toCommonJS(isSameMonth_exports));
    var _isSameHour = (init_isSameHour(), __toCommonJS(isSameHour_exports));
    var _isValid = (init_isValid(), __toCommonJS(isValid_exports));
    var _parse = (init_parse(), __toCommonJS(parse_exports));
    var _setDate = (init_setDate(), __toCommonJS(setDate_exports));
    var _setHours = (init_setHours(), __toCommonJS(setHours_exports));
    var _setMinutes = (init_setMinutes(), __toCommonJS(setMinutes_exports));
    var _setMonth = (init_setMonth(), __toCommonJS(setMonth_exports));
    var _setSeconds = (init_setSeconds(), __toCommonJS(setSeconds_exports));
    var _setMilliseconds = (init_setMilliseconds(), __toCommonJS(setMilliseconds_exports));
    var _setYear = (init_setYear(), __toCommonJS(setYear_exports));
    var _startOfDay = (init_startOfDay(), __toCommonJS(startOfDay_exports));
    var _startOfMonth = (init_startOfMonth(), __toCommonJS(startOfMonth_exports));
    var _endOfMonth = (init_endOfMonth(), __toCommonJS(endOfMonth_exports));
    var _startOfWeek = (init_startOfWeek(), __toCommonJS(startOfWeek_exports));
    var _startOfYear = (init_startOfYear(), __toCommonJS(startOfYear_exports));
    var _isWithinInterval = (init_isWithinInterval(), __toCommonJS(isWithinInterval_exports));
    var _enUS = (init_en_US(), __toCommonJS(en_US_exports));
    var _AdapterDateFnsBase = require_AdapterDateFnsBase2();
    var AdapterDateFns = class extends _AdapterDateFnsBase.AdapterDateFnsBase {
      constructor({
        locale,
        formats
      } = {}) {
        if (true) {
          if (typeof _addDays.addDays !== "function") {
            throw new Error(["MUI: The `date-fns` package v2.x is not compatible with this adapter.", "Please, install v3.x or v4.x of the package or use the `AdapterDateFnsV2` instead."].join("\n"));
          }
          if (!_format.longFormatters) {
            throw new Error("MUI: The minimum supported `date-fns` package version compatible with this adapter is `3.2.x`.");
          }
        }
        super({
          locale: locale ?? _enUS.enUS,
          formats,
          longFormatters: _format.longFormatters
        });
        this.parse = (value, format) => {
          if (value === "") {
            return null;
          }
          return (0, _parse.parse)(value, format, /* @__PURE__ */ new Date(), {
            locale: this.locale
          });
        };
        this.isValid = (value) => {
          if (value == null) {
            return false;
          }
          return (0, _isValid.isValid)(value);
        };
        this.format = (value, formatKey) => {
          return this.formatByString(value, this.formats[formatKey]);
        };
        this.formatByString = (value, formatString) => {
          return (0, _format.format)(value, formatString, {
            locale: this.locale
          });
        };
        this.isEqual = (value, comparing) => {
          if (value === null && comparing === null) {
            return true;
          }
          if (value === null || comparing === null) {
            return false;
          }
          return (0, _isEqual.isEqual)(value, comparing);
        };
        this.isSameYear = (value, comparing) => {
          return (0, _isSameYear.isSameYear)(value, comparing);
        };
        this.isSameMonth = (value, comparing) => {
          return (0, _isSameMonth.isSameMonth)(value, comparing);
        };
        this.isSameDay = (value, comparing) => {
          return (0, _isSameDay.isSameDay)(value, comparing);
        };
        this.isSameHour = (value, comparing) => {
          return (0, _isSameHour.isSameHour)(value, comparing);
        };
        this.isAfter = (value, comparing) => {
          return (0, _isAfter.isAfter)(value, comparing);
        };
        this.isAfterYear = (value, comparing) => {
          return (0, _isAfter.isAfter)(value, (0, _endOfYear.endOfYear)(comparing));
        };
        this.isAfterDay = (value, comparing) => {
          return (0, _isAfter.isAfter)(value, (0, _endOfDay.endOfDay)(comparing));
        };
        this.isBefore = (value, comparing) => {
          return (0, _isBefore.isBefore)(value, comparing);
        };
        this.isBeforeYear = (value, comparing) => {
          return (0, _isBefore.isBefore)(value, this.startOfYear(comparing));
        };
        this.isBeforeDay = (value, comparing) => {
          return (0, _isBefore.isBefore)(value, this.startOfDay(comparing));
        };
        this.isWithinRange = (value, [start, end]) => {
          return (0, _isWithinInterval.isWithinInterval)(value, {
            start,
            end
          });
        };
        this.startOfYear = (value) => {
          return (0, _startOfYear.startOfYear)(value);
        };
        this.startOfMonth = (value) => {
          return (0, _startOfMonth.startOfMonth)(value);
        };
        this.startOfWeek = (value) => {
          return (0, _startOfWeek.startOfWeek)(value, {
            locale: this.locale
          });
        };
        this.startOfDay = (value) => {
          return (0, _startOfDay.startOfDay)(value);
        };
        this.endOfYear = (value) => {
          return (0, _endOfYear.endOfYear)(value);
        };
        this.endOfMonth = (value) => {
          return (0, _endOfMonth.endOfMonth)(value);
        };
        this.endOfWeek = (value) => {
          return (0, _endOfWeek.endOfWeek)(value, {
            locale: this.locale
          });
        };
        this.endOfDay = (value) => {
          return (0, _endOfDay.endOfDay)(value);
        };
        this.addYears = (value, amount) => {
          return (0, _addYears.addYears)(value, amount);
        };
        this.addMonths = (value, amount) => {
          return (0, _addMonths.addMonths)(value, amount);
        };
        this.addWeeks = (value, amount) => {
          return (0, _addWeeks.addWeeks)(value, amount);
        };
        this.addDays = (value, amount) => {
          return (0, _addDays.addDays)(value, amount);
        };
        this.addHours = (value, amount) => {
          return (0, _addHours.addHours)(value, amount);
        };
        this.addMinutes = (value, amount) => {
          return (0, _addMinutes.addMinutes)(value, amount);
        };
        this.addSeconds = (value, amount) => {
          return (0, _addSeconds.addSeconds)(value, amount);
        };
        this.getYear = (value) => {
          return (0, _getYear.getYear)(value);
        };
        this.getMonth = (value) => {
          return (0, _getMonth.getMonth)(value);
        };
        this.getDate = (value) => {
          return (0, _getDate.getDate)(value);
        };
        this.getHours = (value) => {
          return (0, _getHours.getHours)(value);
        };
        this.getMinutes = (value) => {
          return (0, _getMinutes.getMinutes)(value);
        };
        this.getSeconds = (value) => {
          return (0, _getSeconds.getSeconds)(value);
        };
        this.getMilliseconds = (value) => {
          return (0, _getMilliseconds.getMilliseconds)(value);
        };
        this.setYear = (value, year) => {
          return (0, _setYear.setYear)(value, year);
        };
        this.setMonth = (value, month) => {
          return (0, _setMonth.setMonth)(value, month);
        };
        this.setDate = (value, date) => {
          return (0, _setDate.setDate)(value, date);
        };
        this.setHours = (value, hours) => {
          return (0, _setHours.setHours)(value, hours);
        };
        this.setMinutes = (value, minutes) => {
          return (0, _setMinutes.setMinutes)(value, minutes);
        };
        this.setSeconds = (value, seconds) => {
          return (0, _setSeconds.setSeconds)(value, seconds);
        };
        this.setMilliseconds = (value, milliseconds) => {
          return (0, _setMilliseconds.setMilliseconds)(value, milliseconds);
        };
        this.getDaysInMonth = (value) => {
          return (0, _getDaysInMonth.getDaysInMonth)(value);
        };
        this.getWeekArray = (value) => {
          const start = this.startOfWeek(this.startOfMonth(value));
          const end = this.endOfWeek(this.endOfMonth(value));
          let count = 0;
          let current = start;
          const nestedWeeks = [];
          while (this.isBefore(current, end)) {
            const weekNumber = Math.floor(count / 7);
            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
            nestedWeeks[weekNumber].push(current);
            current = this.addDays(current, 1);
            count += 1;
          }
          return nestedWeeks;
        };
        this.getWeekNumber = (value) => {
          return (0, _getWeek.getWeek)(value, {
            locale: this.locale
          });
        };
        this.getYearRange = ([start, end]) => {
          const startDate = this.startOfYear(start);
          const endDate = this.endOfYear(end);
          const years = [];
          let current = startDate;
          while (this.isBefore(current, endDate)) {
            years.push(current);
            current = this.addYears(current, 1);
          }
          return years;
        };
      }
    };
    exports.AdapterDateFns = AdapterDateFns;
  }
});

// node_modules/@mui/x-date-pickers/AdapterDateFns/index.js
var require_AdapterDateFns2 = __commonJS({
  "node_modules/@mui/x-date-pickers/AdapterDateFns/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    Object.defineProperty(exports, "AdapterDateFns", {
      enumerable: true,
      get: function() {
        return _AdapterDateFns.AdapterDateFns;
      }
    });
    var _AdapterDateFns = require_AdapterDateFns();
  }
});
export default require_AdapterDateFns2();
//# sourceMappingURL=@mui_x-date-pickers_AdapterDateFns.js.map
